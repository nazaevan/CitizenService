plugins {
	id 'org.springframework.boot' version '2.6.7'
	id "org.springdoc.openapi-gradle-plugin" version "1.3.4"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springdoc.openapi-gradle-plugin'

group = 'com.mentoring.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

configurations {
	// configuration that holds jars to include in the jar
	extraLibs
}

dependencies {
	implementation 'org.flywaydb:flyway-core:7.15.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
	implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'io.jsonwebtoken:jjwt:0.2'
	implementation 'commons-net:commons-net:3.6'
	implementation("org.springdoc:springdoc-openapi-webmvc-core:1.5.12")
	implementation("org.springdoc:springdoc-openapi-ui:1.5.12")
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	from {
		configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
	}
	manifest {
		attributes(
				'Main-Class': 'com.mentoring.project.demo.DemoApplication'
		)
	}
}

